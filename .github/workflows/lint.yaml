name: Lint Checks
on:
  pull_request:
    branches:
      - main
env:
  GOFMT_SCORE_THRESHOLD: 98
  ISSUE_THRESHOLD: 18
  GOVET_SCORE_THRESHOLD: 100
  GOCYCLO_SCORE_THRESHOLD: 88
  TEST_COVERAGE_THRESHOLD: 7.6
  JIRA_ALLOWED_STATUS: "Work in progress,Dev Testing,Under Review"

jobs:
  Jira:
    name: Jira integration check
    runs-on: ubuntu-latest
    steps:
      - name: jira-lint
        uses: cleartax/jira-lint@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          jira-token: ${{ secrets.JIRA_TOKEN }}
          jira-base-url: https://lambdatest.atlassian.net
          validate_issue_status: true
          allowed_issue_statuses: ${{ env.JIRA_ALLOWED_STATUS }}

      - name: Update PR Title
        uses: tzkhan/pr-update-action@v2
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          head-branch-regex: '(?:(hyp|cyp))-\d+'
          title-template: "[%headbranch%]:"

  Build:
    name: Building Application
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.x

      - name: Go Config
        id: config
        run: |
          go env -w GOPRIVATE=github.com/LambdaTest
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}:x-oauth-basic@github.com/LambdaTest".insteadOf "https://github.com/LambdaTest"
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Golang caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-

      - name: Build binaries
        env:
          CONFIG_PATH: github.com/LambdaTest/hypertest-foreman/pkg/secrets
        run: |
          AWS_LDFLAGS='-X "${{ env.CONFIG_PATH }}.AzureClientId=${{ secrets.AZURE_CLIENT_ID }}" -X "${{ env.CONFIG_PATH }}.AzureClientSecret=${{ secrets.AZURE_CLIENT_SECRET }}" -X "${{ env.CONFIG_PATH }}.AzureTenantId=${{ secrets.AZURE_TENANT_ID }}" -X "${{ env.CONFIG_PATH }}.AwsAccessKeyId=${{ secrets.AWS_ACCESS_KEY_ID }}" -X "${{ env.CONFIG_PATH }}.AwsSecretKeyId=${{ secrets.AWS_SECRET_ACCESS_KEY }}" -X "${{ env.CONFIG_PATH }}.AwsDefaultRegion=${{ secrets.AWS_DEFAULT_REGION }}" -X "${{ env.CONFIG_PATH }}.BearerToken=${{ secrets.BEARER_TOKEN }}" -X "${{ env.CONFIG_PATH }}.BinaryIdentifier=${{ secrets.BINARY_IDENTIFIER }}" -X "${{ env.CONFIG_PATH }}.LnsBrokers=${{ secrets.LNS_BROKERS }}" -X "${{ env.CONFIG_PATH }}.LnsQueueName=${{ secrets.LNS_QUEUE_NAME }}" -X "${{ env.CONFIG_PATH }}.MacType=macmini" -X "${{ env.CONFIG_PATH }}.LTBrowserCloudflarePath=${{ secrets.LTBrowserCloudflarePath }}"'
          AZURE_LDFLAGS='-X "${{ env.CONFIG_PATH }}.SlackWebHookURL=${{ secrets.SLACK_NOTIFY_HOOK_URL }}" -X "${{ env.CONFIG_PATH }}.StorageAccountKey=${{ secrets.STORAGE_ACCOUNT_KEY }}" -X "${{ env.CONFIG_PATH }}.StorageAccountName=${{ secrets.STORAGE_ACCOUNT_NAME }}" -X "${{ env.CONFIG_PATH }}.QueuePlatform=${{ secrets.QUEUE_PLATFORM }}" -X "${{ env.CONFIG_PATH }}.ServiceBusNamespace=${{ secrets.SERVICE_BUS_NAMESPACE }}" -X "${{ env.CONFIG_PATH }}.LnsPlatform=${{ secrets.LNS_PLATFORM }}" -X "${{ env.CONFIG_PATH }}.DownloadBinaryStorageName=${{ secrets.DOWNLOAD_BINARY_STORAGE_NAME }}" -X "${{ env.CONFIG_PATH }}.SentinelApiUrl=${{ secrets.SENTINEL_API_URL }}"'
          AKS_LDFLAGS='-X "${{ env.CONFIG_PATH }}.AKSDownloadBinaryStorageName=${{ secrets.AKS_DOWNLOAD_BINARY_STORAGE_NAME }}" -X "${{ env.CONFIG_PATH }}.AKSStorageAccountName=${{ secrets.AKS_STORAGE_ACCOUNT_NAME }}" -X "${{ env.CONFIG_PATH }}.AKSStorageAccountKey=${{ secrets.AKS_STORAGE_ACCOUNT_KEY }}" -X "${{ env.CONFIG_PATH }}.AKSLnsQueueName=${{ secrets.AKS_LNS_QUEUE_NAME }}"'
          GIT_LDFLAGS='-X "${{ env.CONFIG_PATH }}.GitAuthToken=${{ secrets.GIT_AUTH_TOKEN }}"'

          OS=$(echo "linux darwin windows darwin-m1")
          for os in ${OS}; do
          echo "building binary for $os"
          rm -rf ./build/${os}
          mkdir -p ./build/${os}

          FLAGS=$(echo "AwsAccessKeyId ")
          if [ ${os} == "windows" ]; then
            INFRA_QUEUE_LDFLAG='-X "${{ env.CONFIG_PATH }}.InfraQueueName=${{ secrets.WINDOWS_INFRA_QUEUE_NAME }}" -X "${{ env.CONFIG_PATH }}.DebugQueueName=${{ secrets.WINDOWS_INFRA_DEBUG_QUEUE_NAME }}" -X "${{ env.CONFIG_PATH }}.AKSInfraQueueName=${{ secrets.AKS_WINDOWS_INFRA_QUEUE_NAME }}"'
            GOOS=${os} GOARCH=amd64 go build -ldflags "${AWS_LDFLAGS} ${AZURE_LDFLAGS} ${AKS_LDFLAGS} ${GIT_LDFLAGS} ${INFRA_QUEUE_LDFLAG}" -o build/${os}/hypertest-foreman.exe main.go && echo "binary built for $os"
          elif [ ${os} == "linux" ]; then
            INFRA_QUEUE_LDFLAG='-X "${{ env.CONFIG_PATH }}.InfraQueueName=${{ secrets.LINUX_INFRA_QUEUE_NAME }}" -X "${{ env.CONFIG_PATH }}.DebugQueueName=${{ secrets.LINUX_INFRA_DEBUG_QUEUE_NAME }}" -X "${{ env.CONFIG_PATH }}.AKSInfraQueueName=${{ secrets.AKS_LINUX_INFRA_QUEUE_NAME }}"'
            GOOS=${os} GOARCH=amd64 go build -ldflags "${AWS_LDFLAGS} ${AZURE_LDFLAGS} ${AKS_LDFLAGS} ${GIT_LDFLAGS} ${INFRA_QUEUE_LDFLAG}" -o build/${os}/hypertest-foreman main.go && echo "binary built for $os"
          elif [ ${os} == "darwin-m1" ]; then
            INFRA_QUEUE_LDFLAG='-X "${{ env.CONFIG_PATH }}.InfraQueueName=${{ secrets.MAC_INFRA_QUEUE_NAME }}" -X "${{ env.CONFIG_PATH }}.DebugQueueName=${{ secrets.MAC_INFRA_DEBUG_QUEUE_NAME }}" -X "${{ env.CONFIG_PATH }}.AKSInfraQueueName=${{ secrets.AKS_MAC_INFRA_QUEUE_NAME }}"'
            GOOS=darwin GOARCH=arm64 go build -ldflags "${AWS_LDFLAGS} ${AZURE_LDFLAGS} ${AKS_LDFLAGS} ${GIT_LDFLAGS} ${INFRA_QUEUE_LDFLAG}" -o build/${os}/hypertest-foreman main.go && echo "binary built for $os"
          else
            INFRA_QUEUE_LDFLAG='-X "${{ env.CONFIG_PATH }}.InfraQueueName=${{ secrets.MAC_INFRA_QUEUE_NAME }}" -X "${{ env.CONFIG_PATH }}.DebugQueueName=${{ secrets.MAC_INFRA_DEBUG_QUEUE_NAME }}" -X "${{ env.CONFIG_PATH }}.AKSInfraQueueName=${{ secrets.AKS_MAC_INFRA_QUEUE_NAME }}"'
            GOOS=${os} GOARCH=amd64 go build -ldflags "${AWS_LDFLAGS} ${AZURE_LDFLAGS} ${AKS_LDFLAGS} ${GIT_LDFLAGS} ${INFRA_QUEUE_LDFLAG}" -o build/${os}/hypertest-foreman main.go && echo "binary built for $os"
          fi
          done

  Secret-Scan:
    uses: LambdatestIncPrivate/Security-GithubAction/.github/workflows/secret-scan.yml@main
    secrets:
      SECURITY_TEAM_MEMBERS: ${{ secrets.SECURITY_TEAM_MEMBERS }}
      ACTION_MONITORING_SLACK: ${{ secrets.ACTION_MONITORING_SLACK }}

  Linting:
    name: Linting check
    runs-on: ubuntu-latest
    needs: ["Build"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.x

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Go Config
        id: config
        run: |
          go env -w GOPRIVATE=github.com/LambdaTest
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}:x-oauth-basic@github.com/LambdaTest".insteadOf "https://github.com/LambdaTest"
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Golang Lint
        uses: golangci/golangci-lint-action@v3
        with:
          only-new-issues: true

      - name: Run Go Report Card
        uses: mathiasvr/command-output@v1
        id: goreport
        with:
          run: |
            git clone https://github.com/gojp/goreportcard.git
            cd goreportcard
            make install
            go install ./cmd/goreportcard-cli
            cd ..
            rm -rf goreportcard
            goreportcard-cli | tee reportcard.txt
            files=$(cat reportcard.txt| grep 'Files ' | awk  '{print $3}' | tr -d \%)
            issues=$(cat reportcard.txt| grep 'Issues ' | awk  '{print $3}' | tr -d \%)
            gofmt_score=$(cat reportcard.txt| grep 'gofmt ' | awk  '{print $3}' | tr -d \%)
            go_vet_score=$(cat reportcard.txt| grep 'go_vet ' | awk  '{print $3}' | tr -d \%)
            gocyclo_score=$(cat reportcard.txt| grep 'gocyclo ' | awk  '{print $3}' | tr -d \%)
            rm reportcard.txt
            failed_checks=0
            failure_reason=""
            if [[ $issues -gt $ISSUE_THRESHOLD ]]; then
              failure_reason="${failure_reason}\nIssues: $issues. Threshold was:  $ISSUE_THRESHOLD ."
              ((failed_checks+=1))
            fi
            if [[ $gofmt_score -lt $GOFMT_SCORE_THRESHOLD ]]; then
              failure_reason="${failure_reason}\ngo-fmt score: $gofmt_score. Threshold was: $GOFMT_SCORE_THRESHOLD ."
              ((failed_checks+=1))
            fi
            if [[ $go_vet_score -lt $GOVET_SCORE_THRESHOLD ]]; then
              failure_reason="${failure_reason}\ngo-vet score: $go_vet_score. Threshold was: $GOVET_SCORE_THRESHOLD ."
              ((failed_checks+=1))
            fi
            if [[ $gocyclo_score -lt $GOCYCLO_SCORE_THRESHOLD ]]; then
              failure_reason="${failure_reason}\ngo-cyclo score: $gocyclo_score. Threshold was: $GOCYCLO_SCORE_THRESHOLD."
              ((failed_checks+=1))
            fi
            if [[ $failed_checks -gt 0 ]]; then
              goreportcard-cli -v
              printf "\n\n\n${failure_reason}\nFrom the above output, filter out issues in your touched files and fix them."
              exit 1
            else
              exit 0
            fi

      - name: Comment on PR
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            ## Go Report Card
            ```${{ steps.goreport.outputs.stdout }}```
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  UnitTests:
    needs: ["Build"]
    name: Unit Test coverage check
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18.x

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Go Config
        id: config
        run: |
          go env -w GOPRIVATE=github.com/LambdaTest
          git config --global url."https://${{ secrets.ACCESS_TOKEN }}:x-oauth-basic@github.com/LambdaTest".insteadOf "https://github.com/LambdaTest"
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Run coverage
        uses: mathiasvr/command-output@v1
        with:
          run: |
            go test -parallel 4 -coverpkg=./... -coverprofile=profile.cov ./...

      - name: Coverage Status
        run: |
          echo "COVERAGE_SUMMARY=$(go tool cover -func profile.cov | grep total | awk '{print substr($3, 1, length($3)-1)}')" >> $GITHUB_ENV

      - name: Comment on PR
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            ## Test Coverage Report
            | Type | Coverage | Minimum |
            | :--- | :----------- | :------ |
            | Statement | **${{ env.COVERAGE_SUMMARY }}%** | **${{ env.TEST_COVERAGE_THRESHOLD }}%** |
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Match test coverage threadsold
        run: echo "$(go tool cover -func profile.cov | grep total | awk '{print substr($3, 1, length($3)-1)}') >= $TEST_COVERAGE_THRESHOLD" | bc -l | ( grep 1 && echo "Thresold $TEST_COVERAGE_THRESHOLD matched." || (echo "Thresold $TEST_COVERAGE_THRESHOLD is not matching." && exit 1))
